"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const stream_1 = require("stream");
const plainjs_1 = require("@json2csv/plainjs");
class JSON2CSVNodeTransform extends stream_1.Transform {
    constructor(opts = {}, asyncOptions = {}, transformOpts = {}) {
        super(transformOpts);
        this.streamParser = new plainjs_1.StreamParser(Object.assign(Object.assign({}, opts), { eol: opts.eol || os_1.default.EOL }), Object.assign(Object.assign({}, asyncOptions), { objectMode: transformOpts.objectMode || transformOpts.readableObjectMode }));
        this.streamParser.onHeader = (header) => this.emit('header', header);
        this.streamParser.onLine = (line) => this.emit('line', line);
        this.streamParser.onData = (data) => this.push(data);
        this.streamParser.onError = (err) => {
            throw err;
        };
        this.streamParser.onEnd = () => {
            if (!this.writableEnded)
                this.end();
        };
    }
    /**
     * Main function that send data to the parse to be processed.
     *
     * @param {Buffer} chunk Incoming data
     * @param {String} encoding Encoding of the incoming data. Defaults to 'utf8'
     * @param {Function} done Called when the proceesing of the supplied chunk is done
     */
    _transform(chunk, encoding, done) {
        try {
            this.streamParser.write(chunk);
            done();
        }
        catch (err) {
            done(err);
        }
    }
    _final(done) {
        try {
            this.streamParser.end();
            done();
        }
        catch (err) {
            done(err);
        }
    }
    promise() {
        return new Promise((resolve, reject) => {
            const csvBuffer = [];
            this.on('data', (chunk) => csvBuffer.push(chunk.toString()))
                .on('finish', () => resolve(csvBuffer.join('')))
                .on('error', (err) => reject(err));
        });
    }
}
exports.default = JSON2CSVNodeTransform;
//# sourceMappingURL=Transform.js.map