"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const Transform_js_1 = __importDefault(require("./Transform.js"));
class JSON2CSVNodeAsyncParser {
    constructor(opts = {}, asyncOpts = {}, transformOpts = {}) {
        this.opts = opts;
        this.asyncOpts = asyncOpts;
        this.transformOpts = transformOpts;
    }
    /**
     * Main function that converts json to csv.
     *
     * @param {Stream|Array|Object} data Array of JSON objects to be converted to CSV
     * @returns {Stream} A stream producing the CSV formated data as a string
     */
    parse(data) {
        // if (Array.isArray(data)) {
        //   data = Readable.from(data.filter((item) => item !== null));
        // } else if (isIterable(data) || isAsyncIterable(data)) {
        //   data = Readable.from(data, { objectMode: false });
        if (typeof data === 'string' || ArrayBuffer.isView(data)) {
            data = stream_1.Readable.from(data, { objectMode: false });
        }
        else if (Array.isArray(data)) {
            data = stream_1.Readable.from(data.filter((item) => item !== null));
        }
        else if (typeof data === 'object' && !(data instanceof stream_1.Readable)) {
            data = stream_1.Readable.from([data]);
        }
        if (!(data instanceof stream_1.Readable)) {
            throw new Error('Data should be a JSON object, JSON array, typed array, string or stream');
        }
        return data.pipe(new Transform_js_1.default(this.opts, this.asyncOpts, Object.assign({ objectMode: data.readableObjectMode }, this.transformOpts)));
    }
}
exports.default = JSON2CSVNodeAsyncParser;
//# sourceMappingURL=AsyncParser.js.map