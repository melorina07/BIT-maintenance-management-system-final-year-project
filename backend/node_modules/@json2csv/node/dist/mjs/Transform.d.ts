/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Transform, type TransformOptions, type TransformCallback } from 'stream';
import { type ParserOptions, type StreamParserOptions } from '@json2csv/plainjs';
export default class JSON2CSVNodeTransform<TRaw extends object, T extends object> extends Transform {
    private streamParser;
    constructor(opts?: ParserOptions<TRaw, T>, asyncOptions?: StreamParserOptions, transformOpts?: TransformOptions);
    /**
     * Main function that send data to the parse to be processed.
     *
     * @param {Buffer} chunk Incoming data
     * @param {String} encoding Encoding of the incoming data. Defaults to 'utf8'
     * @param {Function} done Called when the proceesing of the supplied chunk is done
     */
    _transform(chunk: any, encoding: BufferEncoding, done: TransformCallback): void;
    _final(done: any): void;
    promise(): Promise<string>;
}
//# sourceMappingURL=Transform.d.ts.map